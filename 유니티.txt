



				충돌처리
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
트리거를 사용하려면 콜라이더를 넣고 두 오브젝트중 하나에 isTrigger체크가 되어 있어야 하고
Trigger는 둘 중 하나에 RigidBody가 있어야 체크가 가능하다.(보통 움직이는 물체에 넣음)
isTrigger 체크를 하면 물리법칙에 영향을 받지 않음(중력을 끄면 그 자리에 냅둘수있음)

isKinematic은 외부의 물리효과를 받을지를 결정한다

CollisionDetection은 충돌처리를 얼마나 정확하게 하냐를 결정한다

OnCollision함수는 매개변수가 Collision이고
OnTrigger함수는 매개변수가 Collider이다


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ








				카메라
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
카메라 줌은 field of View를 사용하고

미니맵은 viewport Rect을 사용한다. 이때 다 렌더링하면 성능이슈가 있기 때문에
속성만 따로 빼서 빨강색, 녹색 이런식으로 표현한다고 함

카메라 Depth로 카메라 두개 이상을 사용해서 화면이 겹칠 때 보이는 우선순위를 정할 수 있음
Depth가 높은게 나중에 그리는 카메라라 앞에 보임

Clear Flags를 Depth only(선택한것만 그리기)로 하고, Culling Mask를 따로 설정해주면
해당 레이어만 카메라에 표시된다.
플레이어 안에 특정한 레이어를 가진 오브젝트를 넣어서 숨겨놓고
해당 레이어만 보이게 하면 미니맵을 구현할 수 있다.

Projection을 Orthographic으로 체크하면 3D 프로젝트에서 2D처럼 보이게 할 수 있다.
원리는 카메라에서 원근감 처리를 없애버리기 때문

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ










				Invoke
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Invoke 일정 시간이 지나면 발생하는 이벤트
일정 시간이 지나면 해당 함수를 실행한다.
Invoke("Death", 3f); //3초후에 해당 함수를 실행한다.

InvokeRepeating("함수이름", 2, 1);
해당 함수를 2초후에 1초마다 실행시켜라

특징
            (오브젝트가 비활성 되어도 작동한다)
	(반대로 코루틴은 오브젝트가 비활성되면 작동하지 않음)





				Animation
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
스프라이트들을 드래그해서 하이라키에 던지면 애니메이션을 자동으로 생성한다.




				UI
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
UI를 사용하려면 Canvas Scaler 에서 Reference Pixel per을 1로 맞춰서 사용
스프라이트들의 Pixels Per Unit도 1로 맞춰준다

스프라이트를 확대해서 사용할때 깨지는걸 방지하기 위해 sprite Editor를 사용한다
에디터에서 Border를 이미지 색감이 안변하는 한에서 지정해주고
UI에서 Rect Transform 컴포넌트에서 Width와 Height를 늘리면 
외각선이 깨지지 않게 확대해서 사용할 수 있다.

다른걸 확대할때도 scale 을 사용하지 않고 width와 height를 사용할것

레이캐스트 타겟 문제 없이 편하게 쓸때는 Panel이 아니라 Empty 오브젝트로 대용해서 사용

이미지 컴포넌트에서 Set Navive Size를 사용하면 원본사이즈로 설정가능





				버튼

대부분의 UI 버튼들은 클릭했을때가 아니라 버튼을 떼었을때로 설정할것

버튼
Highlighted
-마우스가 위로 올라갔을때
Pressced
-클릭
Selected
최근에 클릭한 버튼
Desabled
-Interactable이 체크가 풀린 버튼


OnClick( ) 에서 스크립트가 들어있는 오브젝트를 넣고
 Popup.SendMessage 설정하고 함수이름을 적어주면 버튼실행가능



				인풋필드
Content Type으로 패스워드입력이나 숫자키 입력 등의 설정을 지정할 수 있음

Change
	키입력중에 이벤트
On End Edit
	엔터등으로 이벤트를 끝냈을때




				라디오그룹
빈 오브젝트에 Toggle Group을 붙이고
그 밑에 자식들로 Radio들을 넣고
getComponentsInChildren으로 가져다 쓴다






				네비매쉬
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
빈 오브젝트 stage를 만들고 밑에 자식으로 땅이나 벽들을 넣는다
그리고 stage의 인스팩터 오른쪽 위에 static(네비게이션 스태틱)을 체크 yes까지

window - ai - navigation
stage과 자식들을 드래그선택하고 Navigation에서 Bake - Bake
하늘색 색칠된 부분은 이동가능, 아닌부분은 이동불가


				    Bake
Bake- Agent Radius와 Height로 
플레이어 크기에 맞춰 이동불가부분 지름을 조절할것

MaxSlope 경사지형의 최대 기울기
Step Height 계단높이를 의미 해당 값까지는 계단으로 쳐서 위로 지나감

				    Areas
지형 태그를 세팅해서 오른쪽 숫자가 cost
cost가 높은곳은 잘 가려고 하지 않음
원리는 현재 지점에서 목표지점으로 가려고 한다 할때 경로의 cost 합들을 비교해서 경로를 결정하기 때문

태그는 인스팩터  Navigation - Object- Navigation Area에서 설정 가능하다.



				AI - Nav Mesh Agent
using UnityEngine.AI; 

Angular Speed 회전속도
Acceleration 가속도
Stopping Distance는 목적지에 도착할때 해당 값만큼 여유를 가지고 멈춘다
		  이게 0 이면 타겟과 겹쳐버리는 문제가 생김
		  콜라이더를 가지고 있다면 타겟을 밀어버림




				    사운드
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
audioSource.PlayOneShot - 한번실행
audioSource.Play(오디오클립, 실행지연시간)

발자국 소리등은 발에 콜라이더를 붙이거나 오디오피치로 사운드간격을 조절
애니메이션에서 발이 닿는타임을 체크해서 이벤트로 붙여도 가능


Audio Reverb Zone 컴퍼넌트 - 특정영역에 사운드 재생
	-ReverbPreset으로 사운드에 특색을 줄 수 있다.
	-예를들어 Sewerpipe는 하수구등에서 울리는 소리효과를 줌








ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

				리소스 불러오기
방법2가지
audioClip = Resources.Load<AudioClip>("Sounds/foot/army");
audioClip = Resources.Load(string.Format("Sounds/foot/{0}", "army")) as AudioClip; 





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
				PlayerPrefs
1메가를 넘을 수 없음 
스트림으로 바꾸면 이미지도 저장은 가능

레지스트리 편집기 - HKEY_CURRENT_USER - SOFTWARE - Unity  - UnityEditor
프로젝트 안에 들어있음

레지스트리 용량이 커지면 성능이 느려지기 때문에 사용에 유의

 string getID = PlayerPrefs.GetString("ID2","NONE");
위와같이 ID2를 get했을때 만약 ID2가 존재하지 않는다면 거기에 NONE값을 넣는다

레지스트리에 정보를 넣으면 보안에 취약해서
바이너리로 저장을 하거나 구조체 안에 넣어서 저장을 하는 등 꼬아서 저장함

저장하는 정보단위를 클래스로 하는 경우가 많음


파일입출력 유니티
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System;



[System.Serializable] //이렇게 직렬화를 해줘야 저장할수가 있음
public class SaveInformation
{
    public string name;
    public float posX;
    public float posY;
    public float posZ;
}


플레이어프립스 바이너리 저장, 불러오기 예시
 void SaveBinary()
    {
        //기본파일
        SaveInformation setInfo = new SaveInformation();
        setInfo.name = "2023Inha";
        setInfo.posX = 0.0f;
        setInfo.posY = 4.5f;
        setInfo.posZ = 5.5f;
        Debug.Log(setInfo);



        //Save
        BinaryFormatter formatter = new BinaryFormatter();
        MemoryStream memStream = new MemoryStream();

        formatter.Serialize(memStream, setInfo);
        byte[] bytes = memStream.GetBuffer();
        String memStr = Convert.ToBase64String(bytes);
        Debug.Log(memStr);

        PlayerPrefs.SetString("SaveInformation", memStr);

        //Load
        string getInfo = PlayerPrefs.GetString("SaveInformation");
        Debug.Log(getInfo);
        byte[] getBytes = Convert.FromBase64String(getInfo);
        MemoryStream getMemStream = new MemoryStream(getBytes);

        BinaryFormatter formatter2 = new BinaryFormatter();
        SaveInformation getInformation = (SaveInformation)formatter2.Deserialize(getMemStream);
   }




				Json
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Plugins 경로를 활용해야함
에디터상 업데이트가 느려서 파일을 저장했는데 에디터에 일시적으로 안보일 수 있음
ctrl + R 이나 폴더에 오른쪽 마우스 눌러서 Refresh하면 보임

저장하려는 데이터는 public으로 하거나 serialize를 해줘야 저장이 가능하다

수업 예제에는 윈도우 기준으로 data경로들을 처리했는데 안드로이드같이 운영체제가
다를 경우 경로들도 바뀔 수 있음







				애니메이션 IK
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
모델에 따라 IK가 가능하면 그냥 하고 불가능하면
IK아바타를 만들어서 애니메이터의 base레이어의 마스크를 IK아바타로 대체해 버린다








				로딩씬
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
씬이 넘어갈때 리소스가 많아지면 바로 씬이 넘어가지 않는다.
따라서 중간에 로딩씬을 넣어서 해결

async.allowSceneActivation 가 true면 바로 씬이 변경된다
따라서 false로 놔두고 연출 후에 true로 변경


				메뉴추가
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Assets - Editor
경로안에 코드가 들어있어야 함

ㅡㅡㅡㅡ
using UnityEditor;

    [MenuItem("Menu2023/Clear PlayerPrefs")]
    private static void Clear_PlayerPrefsAll()
    {
        PlayerPrefs.DeleteAll();
    }

이러면 유니티 에디터 메뉴바 상단에 메뉴가 생김

ㅡㅡㅡㅡ

    % -Ctrl
    # - Shift
    & - Alt
단축키 만들때 쓰는 서식문자


    [MenuItem("Menu2023/SubMenu/HotKey Test 1 %#[")]
    private static void SubMenu_HotKey_1()
    {
        Debug.Log("HotKey Test : Ctrl + Shift + [");
    }

위와같이 사용

ㅡㅡㅡㅡ

파일에 오른쪽마우스 눌렀을때 나오게

    [MenuItem("Assets/Load Selected Scene")]
    private static void LoadSelectedScene()
    {
        var selected = Selection.activeObject;

        //런타임일때는 true 아닐떄는 else로 들어가서 실행
        if(EditorApplication.isPlaying)
        {
            EditorSceneManager.LoadScene(AssetDatabase.GetAssetPath(selected));
        }
        else
            EditorSceneManager.OpenScene(AssetDatabase.GetAssetPath(selected));
    }



