객체지향 Object Oriented Programming (OOP) 특징 4개
Inheritance
Abstraction -공통되는 부분을 뽑아 구조를 만든다
Encapsulation - 접근제한지정자로 코드간 간섭을 줄이고 유지보수를 쉽게끔 만든다
Polymopgism(다형성) - 객체가 하나의 형식만을 사용하는 게 아닌 다양한 모습과 형태로 사용됨



ArrayList 
 - 선언시 데이터타입이 고정되는 List와 달리 여러가지 데이터 타입을 넣을수 있다.



대입연산시
왼쪽이 명찰 오른쪽이 실체




다중 상속이 불가능하고 단일 상속만 가능
인터페이스를 이용하면 c++의 다중 상속을 흉내 낼 수 있음
(인터페이스는 실제 상속은 아님)





virtual 키워드와 override 키워드

virtual 함수가 정의된 클래스 인스턴스(메모리할당)할 때,
가상함수 포인터 배열이 클래스 맨 앞 메모리 영역에 할당됨.
가상함수 테이블 크기는 가상함수 개수와 비례함.
그리고, 클래스는 이 가상함수 포인터 
배열을 가리키는 포인터(4byte)가 추가적으로 잡힘








인터페이스(Interface)
어떤 메소드나 속성을 반드시 시행(구현)해야 하는지를 알려준다.
클래스를 만들 때, 일련의 메소드를 빼먹지 않았는지 컴파일러가 
확인하는데 쓰는 리스트




			- 인터페이스 클래스 구조 - 
Inferface IStingPatrol (i 를 앞에 붙이고 뒤에 클래스명)
멤버가 다 public임
멤버가 다 선언만 하고 정의하지 않음
코드는 인터페이스를 구현하는 클래스에서 작성

인터페이로 인스턴스를 생성할수 없음
IStingPatrol dennins = new IStingPatrol(); 불가능한 문법
인터페스를 참조하는건 가능함
classs NectarStinger : IStingPatrol 일 때
NectarStinger fred = New Necta();
IStingPatrol george = fred;

IWorker[] bees = new IWorker[3]; 
 bees[0] = new NectarStinger(); 
 bees[1] = new RoboBee(); 
 bees[2] = new Worker(); 

인터페이스의 is 와 as 기능 을 익혀야함
is 뭘 상속받았는지 알고싶을때
as 상속받은얘로 뭘 하고 싶을때(?)
둘 다 다운캐스팅임

클래스 다이어그램에서 인터페이스는 점선으로 이어줌







접근제한지정자
sealed 클래스의 서브 클래스를 만들 수 없음
internal 같은 어셈블리에 속하는 클래스들에 대해서만 public






추상 클래스 Abstract class
1.인터페이스의 특징을 가진다(미리 멤버들을 선언함)
2.노말클래스의 특징을 가진다(그냥 구현해서 써도 된다)
3.그러나 객체를 만들 수 없다.
4.오직 Abstract Class만이 Abstract Method를 가질수있다.





Boxing & UnBoxing   **따로 공부 필요 면접 단골

Boxing
i = 5;
-> object o = i; // object 는 c++의 포인터와 비슷한 사용
값 형식을 object(참조 형식)으로 변환하는 과정
c#에서 박싱을 잘못 쓸 경우 heap메로리 사용으로 부하가 발생됨

UnBoxing
Object(참조)형식을 값형식으로 변환하는 과정
int j = (int) o;






Generic Collection : List
ArrayList 는 타입없이 아무거나 넣을 수 있지만 박싱언박싱 이슈가 발생할 수 있다,
따라서 ArrayList는 가급적 쓰지 말고 Generic List를 쓸 것 






c#의 딕셔너리는 c++의 map과 유사
다만 유니티의 인스팩터 창과 호환이 잘 되지 않으니 사용을 가급적 자제할것







IEnumerable 을 상속받았기 때문에 아래와 같이 자유로운 형변환이 가능함
Stack<string> myStack = new Stack<string> ();

Queue<string> myQueue = new Queue<string>(myStack);
myQueue.Dequeue();

List<string>myList = new List<string>(myQueue);
myList.Add("extra");

Stack<string> anotherStack = new Stack<string>(myList);






싱글톤 패턴은 객체지향 설계원칙의 개방-폐쇄 원칙을 파괴한다.
유지보수가 어려워 지고 유닛 단위의 테스트가 어려워진다.
재활용도 어려워 지기 때문에 
따라서 싱글톤을 사용할땐 내가 이 코드를 다른 프로그램에서 재활용 할 때
쉽게 재활용 할 수 있는가를 생각하고 사용해야 한다.

public class Singleton<T> : ~~~ 책에있는 코드 참고
매니저 클래스가 싱글톤 클래스를 상속받아 사용하는식으로 쓴다.






캡슐화에 신경쓸것



클래스 구조를 만들땐 멤버함수들이 반복문이나 재귀함수등으로 구성할 때
최대한 간결한 구조가 나올 수 있도록 구조를 만든다.
수업과제 트리구조(부모포인터 사용했다가 고생),해쉬 참조

또한 클래스에 추가적인 요소를 확장하기 용이하도록
확장성을 고려할것








Delegate 대신
나중엔 유니티 에셋번들을 사용할것(?)

Delegate와 Callback이 같은게 아니라 Delegate를 사용해서
Callback이라는 패턴을 직접 만드는것

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
차이점 

Callback
.NET의 일부가아니다!
(pattern) 직접 만드는것

지정된 한 객체에 알려줌



Event
.NET 의 일부 (Event & Delegates)

구독중인 객체들에게 모두 알려줌
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
공통점

Callback 과 Event 둘다 Delegate를 사용한다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

