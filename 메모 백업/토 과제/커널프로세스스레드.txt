동작에 대한 이해 부가 설명 추가
kernel - Process - Thread

Critical section
Mutex vs   Semaphore
Concurrency vs Paralleism



kernel
역할
-----
운영체제의 뇌와 같은 역할
하드웨어와 소프트웨어 사이의 연결고리
하드웨어 자원(cpu,메모리,디스크,네트워크)에 대한 접근과 제어가 가능하며 효율을 높임
프로세스에게 필요한 시스템 자원(메모리,파일,입출력 장치)등을 할당하고 관리한다.
프로세스 및 스레드의 생성, 스케쥴링, 메모리 할당 등과 같은 핵심 기능을 담당
시스템의 보안을 유지하고 권한을 관리하여 권한이 없는 프로세스가 시스템 자원에 접근하지 못하도록 제어
모든 작업을 관리하고 자원을 조절함 ****
시스템 모드에서 실행되며 ,운영체제의 다른 부분과 구분되는 특권레벨을 가짐

구성요소
-------
1.스케쥴러 - 프로세스나 스레드의 실행을 관리하고 스케쥴링
2.메모리 관리자 - 프로세스의 메모리 할당과 해제, 가상 메모리 등을 제공하여 프로세스가 더 큰 메모리 공간을 사용할 수 있게 함
3.파일 시스템- 파일 및 디렉토리의 생성, 삭제, 읽기 , 쓰기 파일 관련 작업을 처리
4.디바이스 드라이버 - 하드웨어 장치와 커널간의 통신을 담당하는 드라이버. 장치에 대한 제어와 상호작용 가능
5.네트워킹 - 네트워크 연결과 통신을 관리







Process
컴퓨터에서 실행되는 프로그램 혹은 프로그램의 개별 인스턴스 ( 업무 그 자체)
독립된 메모리 공간을 할당받아 작동함.
예를들어 워드나 게임같은것
각각 독립된 공간에서 실행되며, 서로 영향을 주지 않음
프로세스간의 통신(IPC)를 위해 운영체제는 특정 메커니즘(파이프, 소켓, 공유메모리) 등을 제공함
프로세스 간 동기화는 여러 프로세스가 공유 데이터에 동시에 접근하는 것을 제어하는 메커니즘
다양한 상태(실행,대기,준비 등)를 보여하고 있으며 스케쥴링에 의해 계속 변화함
PCB라고 불리는 자료구조에 대한 참조를 가지고 있음
PCB는 프로세스에 대한 중요한 정보를 저장하는 곳으로, 프로세스 식별자, 상태, 우선순위
레지스터 값, 할당된 자원 정보 등을 포함한다.

핵심기능
-프로세스 생성 - 부모 프로세스에서 새로운 자식 프로세스를 생성하는 형태로 이루어짐
 	         필요에 따라 동적으로 이루어지며 운영체제에 의해 관리된다.
-스케쥴링
  우선순위,라운드 로빈 등 다양한 스케쥴링 알고리즘을 사용하여 어떤 프로세스가 cpu를 사용할지 결정

-자원 할당
	-cpu시간,메모리,파일,입출력 장치등의 자원을 말함
	-프로세스에 필요한 자원을 할당하고, 각각의 프로세스가 공정하게 자원을 사용할 수있도록 관리


-프로세스 동기화
	-여러 프로세스가 공유 자원에 동시접근할 경우 프로세스 동기화가 필요
	 이는 데이터의 일관성과 상호배제를 보장하기 위한 기능이다.
	-임계 영억, 세마포어, 뮤텍스 등의 동기화 메커니즘을 사용하여 여러 프로세스 간의 실행 순서
	 와 접근 제어를 관리합니다.
-프로세스 통신
	-프로세스 간에 데이터를 주고받거나 정보를 공유해야 할 때 통신 메커니즘이 사용됨.
	 이는 프로세스간의 데이터 전송과 동기화를 가능케함
	-주로 파이프, 소켓, 공유 메모리, 메시지 큐 등의 메커니즘을 사용





Thread
프로세스 내에서 실행되는 작은 작업(흐름)의 단위.
하나의 프로세스가 여러 개의 스레드를 가질 수 있고,
스레드는 프로세스의 자원(메모리,파일 등)을 공유하며, 동시에 실행
프로세스의 주소 공간 내에서 실행되며, 작업을 병렬로 처리 가능함
경량화 되어 생성,종료,문맥 전환에 대한 오버헤드가 작고, 동시에 실행되는 여러 스레드가
프로세스의 작업을 병렬로 처리할 수 있음

스레드의 특징
-경량성
	스레드는 프로세스 내에서 생성되기 때문에, 프로세스의 자원을 공유하면서도
	상대적으로 적은 메모리와 자원을 사용하여 경량하게 동작함 따라서 
	스레드의 생성 및 관리가 프로세스 생성관리보다 더 가볍고 효율적임
-공유자원
	스레드는 같은 프로세스 내에서 실행되므로, 프로세스의 자원을 공유할 수 있음
	또한 공유 자원으로 스레드 간에 데이터를 주고받거나 작업을 협력할 수 있음
	(공유변수나 메시지 큐등의 메커니즘 활용)
-동시성
	여러 스레드가 동시에 실행될 수 있으므로, 병렬성을 활용하여 작업을 효율적으로 처리함

-스레드의 활용
	멀티스레드 프로그래밍은 병렬성을 활용하여 성능을 향상시킴
	 예를들어 웹서버는 여러 클라이언트요청을 동시에 처리하기 위해 스레드를 사용함
	반응성 향상
	 사용자 인터페이스를 담당하는 스레드를 별도로 생성하여 UI작업을 처리하면
	 사용자의 입력에 빠르게 반응하는 프로그램을 구현 할 수 있음
	백그라운드 작업
	 스레드를 사용하여 주요 작업과 별개로 백그라운드에서 동작하는 작업
	 (파일 다운로드, 데이터 처리등)을 처리할 수 있음
		
* Thread에서 주의 해야 할 점

프로그램 개발 시 Thread를 사용하는 이유는 프로그램 내에서 여러 가지 작업을 동시에
처리하기 위해서인데 잘못 사용하면 성능이 저하되는 경우가 있음
ex)스케줄링을 체크하거나 반복적으로 특정 기능을 수행하는 작업을 Thread에 위임할 경우
Thread.Sleep()을 주지 않고 실행하게 되면 해당 Thread는 cpu를 붙잡고 무한 반복하면서
맡은 작업을 수행하게 됨 따라서 적절히 Thread.Sleep을 주어서 다른 thread 에게 작업을 양보해야함

ex)같은 메모리 공간(힙 메모리)을 공유할 수 있다는 장점이 오류가 생기는 문제점이 될 수도 있다.
이러한 경우를 레이스 컨디션이라고 한다.
해결책은 하나의 자원을 여러 쓰레드에서 동시에 사용하지 않게 상호배제 하는것
방법론으론 atomic, mutex의 lock,unlock , lock_guard, scope_lock 등이 있다.







ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Deadlock(교착상태) 조건과 예방
정의
	데드락은 멀티스레드 또는 멀티프로세스 환경에서 발생할 수 있는 상황으로,
	각 스레드 또는 프로세스가 서로가 가진 자원을 기다리면서 무한히 대기하는 상태를 말함
	
조건
	상호배제 : 자원은 동시에 하나의 스레드 또는 프로세스만이 사용 가능함 즉 사용시 독점임
	점유 대기: 최소한 하나의 자원을 점유한 상태에서 다른 자원을 얻기 위해 대기하는 상황
		a는 미네랄을 가진 상태로 가스를 기다리고 있고 b는 가스를 들고 미네랄을 기다리는 상황
	비선점: 한 스레드 또는 프로세스가 어떤 자원을 점유한 상태에서 자발적으로 반납하지 않는 한
		다른 스레드 또는 프로세스가 그 자원을 강제로 빼앗거나 접근할 수 없음
	순환 대기: 스레드 또는 프로세스들이 사이클형태로 자원을 점유하고 있어, 각각이 다음
		자원을 기다리는 상태 꼬리잡기 마냥

위의 상황이 모두 동시에 발생하면 교착상태가 발생하고
예방하려면 위의 4가지 중 하나 이상의 조건을 제거해야 함 

    -상호배제 조건 제거
	자원의 공유를 허가하여 동시에 자원을 사용할 수 있게함
	상호배제가 필요할 경우 동기화 기법으로 접근을 제어 
    -점유 대기 조건 제거
	프로세스가 실행되기 전에 필요한 모든 자원을 한 번에 요청하도록 함
	자원 요청 시, 현재 보유한 자원을 모두 반납한 뒤 요청하도록 함
	이를 최소 요구량 할당이라고 함
    -비선점 조건 제거
	자원을 점유하고 있는 프로세스가 다른 프로세스로부터 강제로 자원을 빼앗을 수 있게 함
	우선순위 기반 예약등를 통해 자원을 필요로 하는 프로세스에게 자원 할당을 선점할 수 있음
    -순환 대기 조건 제거
	자원에 고유한 번호를 할당하고, 자원을 요청할 때 번호 순서대로 요청
	프로세스가 다른 프로세스가 보유한 자원의 번호보다 크면 요청을 보류함
	자원 할당 그래프를 사용하여 사이클이 형성되는지 확인하고, 사이클이 없도록 자원을
	할당함


교착상태 해결법
예방 - 교착상태의 4가지 조건중 하나를 없애거나 발생하지 않도록 하는것 - 효율이 안좋음
회피 - 교착상태를 피해감
탐지&회복- 교착상태가 되도록 허용한 후 대처함