
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
동기 : 어떤 요청을 보낸 뒤, 그 요청의 결과값을 얻기까지 작업을 멈추는 것
비동기 : 어떤 요청을 보낸 뒤, 그 요청의 결과값이 오기까지 멈추지 않고 또 다른 일을
 	수행하는 것

동시성 프로그래밍은 말 그대로 동시에 여러 작업을 수행하는 것이다. 하지만 눈으로 보기
에 동시에 실행되는 것이지, 사실 시분할(Interleaving) 기법을 활용하여 여러 작업을
조금씩 나누어서 번갈아가며 실행하는 것이다.
따라서 A작업과 B작업이 각각10분씩이라면 번갈아가면서 총 20분을 소모한다.

병렬성 프로그래밍은 시분할 기법없이 찐으로 여러 작업을 한 번에 동시에 수행하는 것
인데, 자원(CPU 코어)의 입장에선 자기는 자기 할 일 1개를 하는 것 뿐이다. 즉 병렬성은
'자원(CPU코어)이 여러개' 일 때 가능하다.
따라서 A작업과 B작업이 병렬적으로 실행되어 10분밖에 소모되지 않는다.

Thread와 Coroutine은 모두 동시성 프로그래밍을 위한 기술이다.



스케줄링
- cpu할당 순서 및 방법을 결정하는 일 (어떤 프로세스를 running 상태로 보낼지)
 기준은 scheduling algorithm에 따라서
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
* Thread , 프로세스 등에 대한 정리 


process : 보조기억장치의 '프로그램'이 메모리 상으로 적재되어 실행되면 '프로세스'가 된다.

Process는 독립된 메모리 영역인 '힙'을 할당받는다.

스케줄링의 대상이 되는 작업(task)과 같은 의미로 쓰인다.
최소 하나의 thread를 가지고 있는데, 실제로는 thread 단위로 스케줄링을 한다.
상태는 new , ready, blocked, running, Exit 5가지가 있음



Thread : 같은 Process 내에서 실행되는 여러 작업 (흐름)의 단위

Thread는 Process 하위에 종속되는 보다 작은 단위이고, 각 쓰레드는 독립된 메모리 영역
인 스택(Stack)을 갖는다. Thread를 하나 생성하면, 하나의 스택 메모리가 생기는 것이다.
각 쓰레드는 다른 쓰레드에게 스택 메모리를 공유할 수 없다. 하지만 프로세스의 힙은
속한 모든 Thread가 공유할 수 있다.
(static 메모리(data영역)와 code영역도 공유함)

힙영역을 공유함으로 인해 thread간 문맥전환 할때가, 프로세스 끼리 문맥전환
할 때보다 빠르다. 상대적으로 스위치 해야 할 메모리 영역이 적기 때문
다만 공유함으로 인해서 문제가 생기기도 하는데 아래와 같음




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
* Thread에서 주의 해야 할 점

프로그램 개발 시 Thread를 사용하는 이유는 프로그램 내에서 여러 가지 작업을 동시에
처리하기 위해서인데 잘못 사용하면 성능이 저하되는 경우가 있음
ex)스케줄링을 체크하거나 반복적으로 특정 기능을 수행하는 작업을 Thread에 위임할 경우
Thread.Sleep()을 주지 않고 실행하게 되면 해당 Thread는 cpu를 붙잡고 무한 반복하면서
맡은 작업을 수행하게 됨 따라서 적절히 Thread.Sleep을 주어서 다른 thread 에게 작업을 양보해야함

ex)같은 메모리 공간(힙 메모리)을 공유할 수 있다는 장점이 오류가 생기는 문제점이 될 수도 있다.
이러한 경우를 레이스 컨디션이라고 한다.
해결책은 하나의 자원을 여러 쓰레드에서 동시에 사용하지 않게 상호배제 하는것
방법론으론 atomic, mutex의 lock,unlock , lock_guard, scope_lock 등이 있다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
*쓰레드와 코루틴 차이
* Coroutine 에 대해 정리





쓰레드는 각 태스크에 해당하는 스택 메모리를 할당받는다. 그리고 여러 작업을 동시에
수행해야할 때 OS 는 어떤 쓰레드 작업을 먼저 수행할지, 어떤 쓰레드를 더 많이 수행해야
효율적인지에 대한 스케쥴링 (선점 스케쥴링, Preempting Scheduling)을 해야한다.

Coroutine은 Lightweight Thread라고 부른다. 마찬가지로 작업 하나하나를 효율적으로
분배해서 동시성을 보장하는 것을 목표로 하지만, 작업 하나하나에 Thread를 할당하는
것이 아닌 'Object'를 할당해주고, 이 Object를 자유롭게 스위칭함으로써 Context Switching(문맥전환)
비용을 대폭 줄인 것이다.



Thread
작업 하나하나의 단위 : Thread
 -각 Thread 가 독립적인 Stack 메모리와 레지스터 영역을 가짐
동시성 보장 수단 : Context Switching 
 -운영체제 커널에 의한 Context Switching을 통해 동시성 보장
 -블로킹(Blocking): Thread A 가 Thread B 의 결과가 나오기까지 기다려야 한다면,
  Thread A은 블로킹되어 Thread B의 결과가 나올 때 까지 해당 자원을 못 씀
Thread A 에서 Task 1 을 수행하다가 Task 2 의 결과가 필요할 때, 비동기적으로 Thread B 를 호출을 하게 된다. 
이 때 Thread A 는 블로킹되고, Thread B 로 Context Switching 이 일어나 Task 2 를 수행한다. Task 2 가 완료되면, 
다시 Thread A 로 Context Switching 이 일어나 결과값을 Task 1 에 반환한다.

동시에 같이 수행할 Task 3, Task 4 는 각각 Thread C 와 D 에 할당되고, 총체적으로 봤을 때 
커널 입장에서 Preempting Scheduling 을 통하여 각 태스크를 얼만큼 수행할지, 혹은 무엇을 먼저 수행할지를 
결정하여 알맞게 동시성을 보장하게 되는 것이다.


ㅡㅡ

Coroutine
작업 하나하나의 단위 : Coroutine Object
여러 작업 각각에 Object 를 할당함
Coroutine Object 도 엄연한 객체이기 때문에 JVM Heap 에 적재 됨 (코틀린 기준)
동시성 보장 수단 : Programmer Switching (No-Context Switching)
프로그래머의 코드를 통해 Switching 시점을 마음대로 정함 (OS 관여 X)
Suspend (Non-Blocking) : Object 1 이 Object 2 의 결과가 나오기까지 기다려야 한다면
, Object 1 은 Suspend 되지만, Object 1 을 수행하던 Thread 는 그대로 유효하기 때문에 Object 2 도 Object 1
 과 동일한 Thread 에서 실행될 수 있음

작업 단위는 Coroutine Object 이므로, Task 1 을 수행하다가 비동기 작업 Task 2 가 발생하더라도, Context Switching 
없이 같은 Thread 에서 Task 2 를 수행할 수 있고, 맨 오른쪽 경우처럼 하나의 Thread 에서 여러 Coroutine Object 들을
 같이 수행할 수도 있다. 한 쓰레드에서 다수의 Coroutine 을 수행할 수 있고, Context Switching 이 필요없는 특성에
 따라 Coroutine 을 Light-weight Thread 라고 부르는 것이다.

그런데 위 경우를 다시 보자. Thread A 와 C 가 동시에 수행되는 모습이다. 이러면 결국 동시성 보장을 위해서 
Context Switching 이 필요한 경우다. 따라서, Coroutine 의 'No-Context Switching' 장점을 극강으로 끌어올리기 위해,
 단일 Thread 에서 여러 Coroutine Object 를 컨트롤하는 것이 좋다. (또는 권장한다)




Coroutine 은 Thread 의 대안이 아니라, Thread 를 더 잘게 쪼개어 사용하기 위한 개념이다.

작업의 단위를 Object 로 축소하면서 하나의 Thread 가 다수의 코루틴을 다룰 수 있기 때문에, 
작업 하나하나에 Thread 를 할당하며 메모리 낭비, Context Switching 비용 낭비를 할 필요가 
없음
같은 프로세스 내의 Heap 에 대한 Locking 걱정 또한 사라짐



스레드의 가장 큰 문제점이 데드락인데
코루틴은 데드락에서 자유롭다

스레드는 임계영역에 대해 고민하며 사용해야 하는데 코루틴은 여기서 자유로움